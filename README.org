This is the most versatile way I found to have a system that doesn't move with
the changes to sieladon (compiler, glibc, etc.), while at the same time being
able to create new environments and to install new packages with Spack.

Build
=====

#+begin_example
sudo -E apptainer build dev_envs.sif dev_envs.def
#+end_example
(this is very quick to create, and if I add new environments to the Spack
overlay, we can just modify it quickly and add references to those new environments)

#+begin_example
./create_spack_overlay.sh
#+end_example
(this just creates a persistent overlay, tied to /spack, writable by =angelv=,
so that I can have a complete Spack installation. The variables SPACK_ROOT,
SPACK_USER_CONFIG_PATH, SPACK_USER_CACHE_PATH (see .def) guarantee that this
Spack installation is independent of my host Spack installation)      

#+begin_example
apptainer shell --overlay spack.img dev_envs.sif
Apptainer>  . inside_appt.sh
#+end_example
(this installs the spack environments, based on the .yaml files. See the %help
section in the .def file for instructions on how to use it).

+ Built on [2023-03-07 Tue]:
  + Ubuntu 22.04
  + Apptainer 1.1.5
  + Spack 0.19.1
  + gcc: 10.4.0 ; 9.5.0
  + Notes, when building there are errors for both environments about python
    3.10.8, so I will try with version 3.8.15

Running
=======

On 14th October'22 I tried with Apptainer 1.1.0 in sieladon. I have to add the "ro"
option to the .sh files, or otherwise I will get an error that /var/tmp cannot
be mounted. Now I get a warning, but it looks like, as far as I don't want to
modify the overlay, all is working OK.

Later on I should try to get rid of this ":ro" again and see if things have
improved.
